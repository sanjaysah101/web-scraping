{
    "chapter_name": "Expressions",
    "questions": [
        {
            "question_title": "Which of the following are unary operators in C?\n\n\n1.\n!\n\n\n2.\nsizeof\n\n\n3.\n~\n\n\n4.\n&&",
            "options": [
                {
                    "opt_1": "1, 2",
                    "opt_2": "1, 3",
                    "opt_3": "2, 4",
                    "opt_4": "1, 2, 3",
                    "correct_answer": "1, 2, 3",
                    "description": "An operation with only one operand is called unary operation.\nUnary operators:\n! Logical NOT operator.\n~ bitwise NOT operator.\nsizeof Size-of operator.\n\n\n&& Logical AND is a logical operator.\n\nTherefore, 1, 2, 3 are unary operators."
                }
            ]
        },
        {
            "question_title": "Which of the following correctly shows the hierarchy of arithmetic operations in C?",
            "options": [
                {
                    "opt_1": "/ + * -",
                    "opt_2": "* - / +",
                    "opt_3": "+ - / *",
                    "opt_4": "/ * + -",
                    "correct_answer": "/ * + -",
                    "description": "Simply called as BODMAS (Bracket of Division, Multiplication, Addition and Subtraction).\n\nHow Do I Remember ? BODMAS !\n \nB - Brackets first\nO - Orders (ie Powers and Square Roots, etc.)\nDM - Division and Multiplication (left-to-right)\nAS - Addition and Subtraction (left-to-right)"
                }
            ]
        },
        {
            "question_title": "Which of the following is the correct order of evaluation for the below expression?z = x + y * z / 4 % 2 - 1",
            "options": [
                {
                    "opt_1": "* / % + - =",
                    "opt_2": "= * / % + -",
                    "opt_3": "/ * % - + =",
                    "opt_4": "*  % /  - + =",
                    "correct_answer": "* / % + - =",
                    "description": "C uses left associativity for evaluating expressions to break a tie between two operators having same precedence."
                }
            ]
        },
        {
            "question_title": "Which of the following is the correct usage of conditional operators used in C?",
            "options": [
                {
                    "opt_1": "a>b ? c=30 : c=40;",
                    "opt_2": "a>b ? c=30;",
                    "opt_3": "max = a>b ? a>c?a:c:b>c?b:c",
                    "opt_4": "return (a>b)?(a:b)",
                    "correct_answer": "max = a>b ? a>c?a:c:b>c?b:c",
                    "description": "Option A: assignment statements are always return in paranthesis in the case of conditional operator. It should be a>b? (c=30):(c=40);\n\nOption B: it is syntatically wrong.\n\nOption D: syntatically wrong, it should be return(a>b ? a:b); \n\nOption C: it uses nested conditional operator, this is logic for finding greatest number out of three numbers."
                }
            ]
        },
        {
            "question_title": "In which order do the following gets evaluated\n\n\n1.\nRelational\n\n\n2.\nArithmetic\n\n\n3.\nLogical\n\n\n4.\nAssignment",
            "options": [
                {
                    "opt_1": "2134",
                    "opt_2": "1234",
                    "opt_3": "4321",
                    "opt_4": "3214",
                    "correct_answer": "2134",
                    "description": "2. Arithmetic operators: *, /, %, +, - \n1. Relational operators: >, <, >=, <=, ==, !=\n3. Logical operators   : !, &&, ||\n4. Assignment operators: ="
                }
            ]
        },
        {
            "question_title": "Which of the following is the correct order if calling functions in the below code?\na = f1(23, 14) * f2(12/4) + f3();",
            "options": [
                {
                    "opt_1": "f1, f2, f3",
                    "opt_2": "f3, f2, f1",
                    "opt_3": "Order may vary from compiler to compiler",
                    "opt_4": "None of above",
                    "correct_answer": "Order may vary from compiler to compiler",
                    "description": "Here, Multiplication will happen before the addition, but in which order the functions would be called is undefined. In an arithmetic expression the parenthesis tell the compiler which operands go with which operators but do not force the compiler to evaluate everything within the parenthesis first."
                }
            ]
        }
    ]
}