{
    "chapter_name": "Functions",
    "questions": [
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\nint fun(int(*)());\n\nint main()\n{\n    fun(main);\n    printf(\"Hi\\n\");\n    return 0;\n}\nint fun(int (*p)())\n{\n    printf(\"Hello \");\n    return 0;\n}",
            "options": [
                {
                    "opt_1": "Infinite loop",
                    "opt_2": "Hi",
                    "opt_3": "Hello Hi",
                    "opt_4": "Error",
                    "correct_answer": "Hello Hi",
                    "description": "No answer description is available."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\nvoid fun(int);\ntypedef int (*pf) (int, int);\nint proc(pf, int, int);\n\nint main()\n{\n    int a=3;\n    fun(a);\n    return 0;\n}\nvoid fun(int n)\n{\n    if(n > 0)\n    {\n        fun(--n);\n        printf(\"%d,\", n);\n        fun(--n);\n    }\n}",
            "options": [
                {
                    "opt_1": "0, 2, 1, 0,",
                    "opt_2": "1, 1, 2, 0,",
                    "opt_3": "0, 1, 0, 2,",
                    "opt_4": "0, 1, 2, 0,",
                    "correct_answer": "0, 1, 2, 0,",
                    "description": "No answer description is available."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\nvoid fun(int*, int*);\nint main()\n{\n    int i=5, j=2;\n    fun(&i, &j);\n    printf(\"%d, %d\", i, j);\n    return 0;\n}\nvoid fun(int *i, int *j)\n{\n    *i = *i**i;\n    *j = *j**j;\n}",
            "options": [
                {
                    "opt_1": "5, 2",
                    "opt_2": "10, 4",
                    "opt_3": "2, 5",
                    "opt_4": "25, 4",
                    "correct_answer": "25, 4",
                    "description": "Step 1: int i=5, j=2; Here variable i and j are declared as an integer type and initialized to 5 and 2 respectively.\n\n\nStep 2: fun(&i, &j); Here the function fun() is called with two parameters &i and &j (The & denotes call by reference. So the address of the variable i and j are passed. )\n\n\nStep 3: void fun(int *i, int *j) This function is called by reference, so we have to use * before the parameters.\n\n\nStep 4: *i = *i**i; Here *i denotes the value of the variable i. We are multiplying 5*5 and storing the result 25 in same variable i.\n\n\nStep 5: *j = *j**j; Here *j denotes the value of the variable j. We are multiplying 2*2 and storing the result 4 in same variable j.\n\n\nStep 6: Then the function void fun(int *i, int *j) return back the control back to main() function.\n\n\nStep 7: printf(\"%d, %d\", i, j); It prints the value of variable i and j.\n\n\nHence the output is 25, 4."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\n\nint main()\n{\n    void fun(char*);\n    char a[100];\n    a[0] = 'A'; a[1] = 'B';\n    a[2] = 'C'; a[3] = 'D';\n    fun(&a[0]);\n    return 0;\n}\nvoid fun(char *a)\n{\n    a++;\n    printf(\"%c\", *a);\n    a++;\n    printf(\"%c\", *a);\n}",
            "options": [
                {
                    "opt_1": "AB",
                    "opt_2": "BC",
                    "opt_3": "CD",
                    "opt_4": "No output",
                    "correct_answer": "BC",
                    "description": "No answer description is available."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\nint fun(int);\nint main()\n{\n    float k=3;\n    fun(k=fun(fun(k)));\n    printf(\"%f\\n\", k);\n    return 0;\n}\nint fun(int i)\n{\n    i++;\n    return i;\n}",
            "options": [
                {
                    "opt_1": "5.000000",
                    "opt_2": "3.000000",
                    "opt_3": "Garbage value",
                    "opt_4": "4.000000",
                    "correct_answer": "5.000000",
                    "description": "No answer description is available."
                }
            ]
        },
        {
            "question_title": "If int is 2 bytes wide.What will be the output of the program?\n#include <stdio.h>\nvoid fun(char**);\n\nint main()\n{\n    char *argv[] = {\"ab\", \"cd\", \"ef\", \"gh\"};\n    fun(argv);\n    return 0;\n}\nvoid fun(char **p)\n{\n    char *t;\n    t = (p+= sizeof(int))[-1];\n    printf(\"%s\\n\", t);\n}",
            "options": [
                {
                    "opt_1": "ab",
                    "opt_2": "cd",
                    "opt_3": "ef",
                    "opt_4": "gh",
                    "correct_answer": "cd",
                    "description": "Since C is a machine dependent language sizeof(int) may return different values.\n\nThe output for the above program will be cd in Windows (Turbo C) and gh in Linux (GCC).\n\nTo understand it better, compile and execute the above program in Windows (with Turbo C compiler) and in Linux (GCC compiler)."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\nint func1(int);\n\nint main()\n{\n    int k=35;\n    k = func1(k=func1(k=func1(k)));\n    printf(\"k=%d\\n\", k);\n    return 0;\n}\nint func1(int k)\n{\n    k++;\n    return k;\n}",
            "options": [
                {
                    "opt_1": "k=35",
                    "opt_2": "k=36",
                    "opt_3": "k=37",
                    "opt_4": "k=38",
                    "correct_answer": "k=38",
                    "description": "Step 1: int k=35; The variable k is declared as an integer type and initialized to 35.\n\n\nStep 2: k = func1(k=func1(k=func1(k))); The func1(k) increement the value of k by 1 and return it. Here the func1(k) is called 3 times. Hence it increements value of k = 35 to 38. The result is stored in the variable k = 38.\n\n\nStep 3: printf(\"k=%d\\n\", k); It prints the value of variable k \"38\"."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\n#include<stdlib.h>\n\nint main()\n{\n    int i=0;\n    i++;\n    if(i<=5)\n    {\n        printf(\"IndiaBIX\");\n        exit(1);\n        main();\n    }\n    return 0;\n}",
            "options": [
                {
                    "opt_1": "Prints \"IndiaBIX\" 5 times",
                    "opt_2": "Function main() doesn't calls itself",
                    "opt_3": "Infinite loop",
                    "opt_4": "Prints \"IndiaBIx\"",
                    "correct_answer": "Prints \"IndiaBIx\"",
                    "description": "Step 1: int i=0; The variable i is declared as in integer type and initialized to '0'(zero).\n\n\nStep 2: i++; Here variable i is increemented by 1. Hence i becomes '1'(one).\n\n\nStep 3: if(i<=5) becomes if(1 <=5). Hence the if condition is satisfied and it enter into if block statements.\n\n\nStep 4: printf(\"IndiaBIX\"); It prints \"IndiaBIX\".\n\n\nStep 5: exit(1); This exit statement  terminates the program execution.\n\n\nHence the output is \"IndiaBIx\"."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\nint fun(int, int);\ntypedef int (*pf) (int, int);\nint proc(pf, int, int);\n\nint main()\n{\n    printf(\"%d\\n\", proc(fun, 6, 6));\n    return 0;\n}\nint fun(int a, int b)\n{\n   return (a==b);\n}\nint proc(pf p, int a, int b)\n{\n   return ((*p)(a, b));\n}",
            "options": [
                {
                    "opt_1": "6",
                    "opt_2": "1",
                    "opt_3": "0",
                    "opt_4": "-1",
                    "correct_answer": "1",
                    "description": "No answer description is available."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\n\nint addmult(int ii, int jj)\n{\n    int kk, ll;\n    kk = ii + jj;\n    ll = ii * jj;\n    return (kk, ll);\n}\n\nint main()\n{\n    int i=3, j=4, k, l;\n    k = addmult(i, j);\n    l = addmult(i, j);\n    printf(\"%d %d\\n\", k, l);\n    return 0;\n}",
            "options": [
                {
                    "opt_1": "12 12",
                    "opt_2": "No error, No output",
                    "opt_3": "Error: Compile error",
                    "opt_4": "None of above",
                    "correct_answer": "12 12",
                    "description": "No answer description is available."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\n\nint fun(int i)\n{\n    i++;\n    return i;\n}\n\nint main()\n{\n    int fun(int);\n    int i=3;\n    fun(i=fun(fun(i)));\n    printf(\"%d\\n\", i);\n    return 0;\n}",
            "options": [
                {
                    "opt_1": "5",
                    "opt_2": "4",
                    "opt_3": "Error",
                    "opt_4": "Garbage value",
                    "correct_answer": "5",
                    "description": "Step 1: int fun(int); This is prototype of function fun(). It tells the compiler that the function fun() accept one integer parameter and returns an integer value.\n\n\nStep 2: int i=3; The variable i is declared as an integer type and initialized to value 3.\n\n\nStep 3: fun(i=fun(fun(i)));. The function fun(i) increements the value of i by 1(one) and return it.\n\n\nLets go step by step,\n => fun(i) becomes fun(3) is called and it returns 4.\n => i = fun(fun(i)) becomes i = fun(4) is called and it returns 5 and stored in variable i.(i=5)\n => fun(i=fun(fun(i))); becomes fun(5); is called and it return 6 and nowhere the return value is stored.\n\nStep 4: printf(\"%d\\n\", i); It prints the value of variable i.(5)\n\n\nHence the output is '5'."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\nint i;\nint fun1(int);\nint fun2(int);\n\nint main()\n{\n    extern int j;\n    int i=3;\n    fun1(i);\n    printf(\"%d,\", i);\n    fun2(i);\n    printf(\"%d\", i);\n    return 0;\n}\nint fun1(int j)\n{\n    printf(\"%d,\", ++j);\n    return 0;\n}\nint fun2(int i)\n{\n    printf(\"%d,\", ++i);\n    return 0;\n}\nint j=1;",
            "options": [
                {
                    "opt_1": "3, 4, 4, 3",
                    "opt_2": "4, 3, 4, 3",
                    "opt_3": "3, 3, 4, 4",
                    "opt_4": "3, 4, 3, 4",
                    "correct_answer": "4, 3, 4, 3",
                    "description": "Step 1: int i; The variable i is  declared as an global and integer type.\n\n\nStep 2: int fun1(int); This prototype tells the compiler that the fun1() accepts the one integer parameter and returns the integer value.\n\n\nStep 3: int fun2(int); This prototype tells the compiler that the fun2() accepts the one integer parameter and returns the integer value.\n\n\nStep 4: extern int j; Inside the main function, the extern variable j is declared and defined in another source file.\n\n\nStep 5: int i=3; The local variable i is defines as an integer type and initialized to 3.\n\n\nStep 6: fun1(i); The fun1(i) increements the given value of variable i prints it. Here fun1(i) becomes fun1(3) hence it prints '4' then the control is given back to the main function.\n\n\nStep 7: printf(\"%d,\", i); It prints the value of local variable i. So, it prints '3'.\n\n\nStep 8: fun2(i); The fun2(i) increements the given value of variable i prints it. Here fun2(i) becomes fun2(3) hence it prints '4' then the control is given back to the main function.\n\n\nStep 9: printf(\"%d,\", i); It prints the value of local variable i. So, it prints '3'.\n\n\nHence the output is \"4 3 4 3\"."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\n\nint main()\n{\n    int fun(int);\n    int i = fun(10);\n    printf(\"%d\\n\", --i);\n    return 0;\n}\nint fun(int i)\n{\n   return (i++);\n}",
            "options": [
                {
                    "opt_1": "9",
                    "opt_2": "10",
                    "opt_3": "11",
                    "opt_4": "8",
                    "correct_answer": "9",
                    "description": "Step 1: int fun(int); Here we declare the prototype of the function fun().\n\n\nStep 2: int i = fun(10); The variable i is declared as an integer type and the result of the fun(10) will be stored in the variable i.\n\n\nStep 3: int fun(int i){ return (i++); } Inside the fun() we are returning a value return(i++). It returns 10. because i++ is the post-increement operator.\n\n\nStep 4: Then the control back to the main function and the value 10 is assigned to variable i.\n\n\nStep 5: printf(\"%d\\n\", --i); Here --i denoted pre-increement. Hence it prints the value 9."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\nint check (int, int);\n\nint main()\n{\n    int c;\n    c = check(10, 20);\n    printf(\"c=%d\\n\", c);\n    return 0;\n}\nint check(int i, int j)\n{\n    int *p, *q;\n    p=&i;\n    q=&j;\n    i>=45 ? return(*p): return(*q);\n}",
            "options": [
                {
                    "opt_1": "Print 10",
                    "opt_2": "Print 20",
                    "opt_3": "Print 1",
                    "opt_4": "Compile error",
                    "correct_answer": "Compile error",
                    "description": "There is an error in this line i>=45 ? return(*p): return(*q);. We cannot use return keyword in the terenary operators."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\n\nint main()\n{\n    int i=1;\n    if(!i)\n        printf(\"IndiaBIX,\");\n    else\n    {\n        i=0;\n        printf(\"C-Program\");\n        main();\n    }\n    return 0;\n}",
            "options": [
                {
                    "opt_1": "prints \"IndiaBIX, C-Program\" infinitely",
                    "opt_2": "prints \"C-Program\" infinetly",
                    "opt_3": "prints \"C-Program, IndiaBIX\" infinitely",
                    "opt_4": "Error: main() should not inside else statement",
                    "correct_answer": "prints \"C-Program\" infinetly",
                    "description": "Step 1: int i=1; The variable i is declared as an integer type and initialized to 1(one).\n\n\nStep 2: if(!i) Here the !(NOT) operator reverts the i value 1 to 0. Hence the if(0) condition fails. So it goes to else part.\n\n\nStep 3: else { i=0; In the else part variable i is assigned to value 0(zero).\n\n\nStep 4: printf(\"C-Program\"); It prints the \"C-program\".\n\n\nStep 5: main(); Here we are calling the main() function.\n\n\nAfter calling the function, the program repeats from step 1 to step 5 infinitely.\n\n\nHence it prints \"C-Program\" infinitely."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\nint check(int);\nint main()\n{\n    int i=45, c;\n    c = check(i);\n    printf(\"%d\\n\", c);\n    return 0;\n}\nint check(int ch)\n{\n    if(ch >= 45)\n        return 100;\n    else\n        return 10;\n}",
            "options": [
                {
                    "opt_1": "100",
                    "opt_2": "10",
                    "opt_3": "1",
                    "opt_4": "0",
                    "correct_answer": "100",
                    "description": "Step 1: int check(int); This prototype tells the compiler that the function check() accepts one integer parameter and returns an integer value.\n\n\nStep 2: int l=45, c; The variable i and c are declared as an integer type and i is initialized to 45.\n\n\nThe function check(i) return 100 if the given value of variable i is >=(greater than or equal to) 45, else it will return 10.\n\n\nStep 3: c = check(i); becomes c = check(45); The function check() return 100 and it get stored in the variable c.(c = 100)\n                                                                                                                            \n\nStep 4: printf(\"%d\\n\", c); It prints the value of variable c.\n\n\nHence the output of the program is '100'."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\nint sumdig(int);\nint main()\n{\n    int a, b;\n    a = sumdig(123);\n    b = sumdig(123);\n    printf(\"%d, %d\\n\", a, b);\n    return 0;\n}\nint sumdig(int n)\n{\n    int s, d;\n    if(n!=0)\n    {\n        d = n%10;\n        n = n/10;\n        s = d+sumdig(n);\n    }\n    else\n        return 0;\n    return s;\n}",
            "options": [
                {
                    "opt_1": "4, 4",
                    "opt_2": "3, 3",
                    "opt_3": "6, 6",
                    "opt_4": "12, 12",
                    "correct_answer": "6, 6",
                    "description": "No answer description is available."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program in 16 bit platform (Turbo C under DOS)?\n#include<stdio.h>\n\nint main()\n{\n    int fun();\n    int i;\n    i = fun();\n    printf(\"%d\\n\", i);\n    return 0;\n}\nint fun()\n{\n    _AX = 1990;\n}",
            "options": [
                {
                    "opt_1": "Garbage value",
                    "opt_2": "0 (Zero)",
                    "opt_3": "1990",
                    "opt_4": "No output",
                    "correct_answer": "1990",
                    "description": "Turbo C (Windows): The return value of the function is taken from the Accumulator _AX=1990.\n\nBut it may not work as expected in GCC compiler (Linux)."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\n\nint addmult(int ii, int jj)\n{\n    int kk, ll;\n    kk = ii + jj;\n    ll = ii * jj;\n    return (kk, ll);\n}\n\nint main()\n{\n    int i=3, j=4, k, l;\n    k = addmult(i, j);\n    l = addmult(i, j);\n    printf(\"%d, %d\\n\", k, l);\n    return 0;\n}",
            "options": [
                {
                    "opt_1": "12, 12",
                    "opt_2": "7, 7",
                    "opt_3": "7, 12",
                    "opt_4": "12, 7",
                    "correct_answer": "12, 12",
                    "description": "Step 1: int i=3, j=4, k, l; The variables i, j, k, l are declared as an integer type and variable i, j are initialized to 3, 4 respectively.\n\n\nThe function addmult(i, j); accept 2 integer parameters. \n\n\nStep 2: k = addmult(i, j); becomes k = addmult(3, 4)\n\n\n In the function addmult(). The variable kk, ll are declared as an integer type int kk, ll;  \n\n kk = ii + jj; becomes kk = 3 + 4 Now the kk value is '7'. \n ll = ii * jj; becomes ll = 3 * 4 Now the ll value is '12'. \n return (kk, ll); It returns the value of variable ll only.\n The value 12 is stored in variable 'k'. \n\nStep 3: l = addmult(i, j); becomes l = addmult(3, 4)\n\n\n kk = ii + jj; becomes kk = 3 + 4 Now the kk value is '7'. \n ll = ii * jj; becomes ll = 3 * 4 Now the ll value is '12'. \n return (kk, ll); It returns the value of variable ll only.\n The value 12 is stored in variable 'l'.  \n\nStep 4: printf(\"%d, %d\\n\", k, l); It prints the value of k and l\n\n\nHence the output is \"12, 12\"."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\nint i;\nint fun();\n\nint main()\n{\n    while(i)\n    {\n        fun();\n        main();\n    }\n    printf(\"Hello\\n\");\n    return 0;\n}\nint fun()\n{\n    printf(\"Hi\");\n}",
            "options": [
                {
                    "opt_1": "Hello",
                    "opt_2": "Hi Hello",
                    "opt_3": "No output",
                    "opt_4": "Infinite loop",
                    "correct_answer": "Hello",
                    "description": "Step 1: int i; The variable i is declared as an integer type.\n\n\nStep 1: int fun(); This prototype tells the compiler that the function fun() does not accept any arguments and it returns an integer value.\n\n\nStep 1: while(i) The value of i is not initialized so this while condition is failed. So, it does not execute the while block.\n\n\nStep 1: printf(\"Hello\\n\"); It prints \"Hello\".\n\n\nHence the output of the program is \"Hello\"."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\nint reverse(int);\n\nint main()\n{\n    int no=5;\n    reverse(no);\n    return 0;\n}\nint reverse(int no)\n{\n    if(no == 0)\n        return 0;\n    else\n        printf(\"%d,\", no);\n    reverse (no--);\n}",
            "options": [
                {
                    "opt_1": "Print 5, 4, 3, 2, 1",
                    "opt_2": "Print 1, 2, 3, 4, 5",
                    "opt_3": "Print 5, 4, 3, 2, 1, 0",
                    "opt_4": "Infinite loop",
                    "correct_answer": "Infinite loop",
                    "description": "Step 1: int no=5; The variable no is declared as integer type and initialized to 5.\n\n\nStep 2: reverse(no); becomes reverse(5); It calls the function reverse() with '5' as parameter.\n\n\nThe function reverse accept an integer number 5 and it returns '0'(zero) if(5 == 0) if the given number is '0'(zero) or else printf(\"%d,\", no); it prints that number 5  and calls the function reverse(5);.\n\nThe function runs infinetely because the there is a post-decrement operator is used. It will not decrease the value of 'n' before calling the reverse() function.  So, it calls reverse(5) infinitely.\n\nNote: If we use pre-decrement operator like reverse(--n), then the output will be 5, 4, 3, 2, 1. Because before calling the function, it decrements the value of 'n'."
                }
            ]
        }
    ]
}