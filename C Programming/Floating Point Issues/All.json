{
    "chapter_name": "Floating Point Issues",
    "questions": [
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\nint main()\n{\n    float a=0.7;\n    if(a < 0.7)\n        printf(\"C\\n\");\n    else\n        printf(\"C++\\n\");\n    return 0;\n}",
            "options": [
                {
                    "opt_1": "C",
                    "opt_2": "C++",
                    "opt_3": "Compiler error",
                    "opt_4": "Non of above",
                    "correct_answer": "C",
                    "description": "if(a < 0.7) here a is a float variable and 0.7 is a double constant. The float variable a is less than double constant 0.7. Hence the if condition is satisfied and it prints 'C'Example:\n\n#include<stdio.h>\nint main()\n{\n    float a=0.7;\n    printf(\"%.10f %.10f\\n\",0.7, a);\n    return 0;\n}\n\n\nOutput:0.7000000000  0.6999999881"
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\nint main()\n{\n    float f=43.20;\n    printf(\"%e, \", f);\n    printf(\"%f, \", f);\n    printf(\"%g\", f);\n    return 0;\n}",
            "options": [
                {
                    "opt_1": "4.320000e+01, 43.200001, 43.2",
                    "opt_2": "4.3, 43.22, 43.21",
                    "opt_3": "4.3e, 43.20f, 43.00",
                    "opt_4": "Error",
                    "correct_answer": "4.320000e+01, 43.200001, 43.2",
                    "description": "printf(\"%e, \", f); Here '%e' specifies the \"Scientific Notation\" format. So, it prints the 43.20 as 4.320000e+01.\n\n\nprintf(\"%f, \", f); Here '%f' specifies the \"Decimal Floating Point\" format. So, it prints the 43.20 as 43.200001.\n\n\nprintf(\"%g, \", f); Here '%g' \"Use the shorter of %e or %f\". So, it prints the 43.20 as 43.2."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\nint main()\n{\n    float d=2.25;\n    printf(\"%e,\", d);\n    printf(\"%f,\", d);\n    printf(\"%g,\", d);\n    printf(\"%lf\", d);\n    return 0;\n}",
            "options": [
                {
                    "opt_1": "2.2, 2.50, 2.50, 2.5",
                    "opt_2": "2.2e, 2.25f, 2.00, 2.25",
                    "opt_3": "2.250000e+000, 2.250000, 2.25, 2.250000",
                    "opt_4": "Error",
                    "correct_answer": "2.250000e+000, 2.250000, 2.25, 2.250000",
                    "description": "printf(\"%e,\", d); Here '%e' specifies the \"Scientific Notation\" format. So, it prints the 2.25 as 2.250000e+000.\n\n\nprintf(\"%f,\", d); Here '%f' specifies the \"Decimal Floating Point\" format. So, it prints the 2.25 as 2.250000.\n\n\nprintf(\"%g,\", d); Here '%g' \"Use the shorter of %e or %f\". So, it prints the 2.25 as 2.25.\n\n\nprintf(\"%lf,\", d); Here '%lf' specifies the \"Long Double\" format. So, it prints the 2.25 as 2.250000."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\n#include<math.h>\nint main()\n{\n    printf(\"%d, %d, %d\\n\", sizeof(3.14f), sizeof(3.14), sizeof(3.14l));\n    return 0;\n}",
            "options": [
                {
                    "opt_1": "4, 4, 4",
                    "opt_2": "4, 8, 8",
                    "opt_3": "4, 8, 10",
                    "opt_4": "4, 8, 12",
                    "correct_answer": "4, 8, 10",
                    "description": "sizeof(3.14f) here '3.14f' specifies the float data type. Hence size of float is 4 bytes.\n                \n\nsizeof(3.14) here '3.14' specifies the double data type. Hence size of float is 8 bytes.\n                \n\nsizeof(3.14l) here '3.14l' specifies the long double data type. Hence size of float is 10 bytes.\n\n\nNote: If you run the above program in Linux platform (GCC Compiler) it will give 4, 8, 12 as output. If you run in Windows platform (TurboC Compiler) it will give 4, 8, 10 as output. Because, C is a machine dependent language."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\nint main()\n{\n    float a=0.7;\n    if(a < 0.7f)\n        printf(\"C\\n\");\n    else\n        printf(\"C++\\n\");\n    return 0;\n}",
            "options": [
                {
                    "opt_1": "C",
                    "opt_2": "C++",
                    "opt_3": "Compiler error",
                    "opt_4": "Non of above",
                    "correct_answer": "C++",
                    "description": "if(a < 0.7f) here a is a float variable and 0.7f is a float constant. The float variable a is not less than 0.7f float constant. But both are equal. Hence the if condition is failed and it goes to else it prints 'C++'Example:\n\n#include<stdio.h>\nint main()\n{\n    float a=0.7;\n    printf(\"%.10f %.10f\\n\",0.7f, a);\n    return 0;\n}\n\n\nOutput:0.6999999881  0.6999999881"
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\nint main()\n{\n    float fval=7.29;\n    printf(\"%d\\n\", (int)fval);\n    return 0;\n}",
            "options": [
                {
                    "opt_1": "0",
                    "opt_2": "0.0",
                    "opt_3": "7.0",
                    "opt_4": "7",
                    "correct_answer": "7",
                    "description": "printf(\"%d\\n\", (int)fval); It prints '7'. because, we typecast the (int)fval in to integer. It converts the float value to the nearest integer value."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\n#include<math.h>\nint main()\n{\n    printf(\"%f\\n\", sqrt(36.0));\n    return 0;\n}",
            "options": [
                {
                    "opt_1": "6.0",
                    "opt_2": "6",
                    "opt_3": "6.000000",
                    "opt_4": "Error: Prototype sqrt() not found.",
                    "correct_answer": "6.000000",
                    "description": "printf(\"%f\\n\", sqrt(36.0)); It prints the square root of 36 in the float format(i.e 6.000000).\n\n\nDeclaration Syntax: double sqrt(double x) calculates and return the positive square root of the given number."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\nint main()\n{\n    float *p;\n    printf(\"%d\\n\", sizeof(p));\n    return 0;\n}",
            "options": [
                {
                    "opt_1": "2 in 16bit compiler, 4 in 32bit compiler",
                    "opt_2": "4 in 16bit compiler, 2 in 32bit compiler",
                    "opt_3": "4 in 16bit compiler, 4 in 32bit compiler",
                    "opt_4": "2 in 16bit compiler, 2 in 32bit compiler",
                    "correct_answer": "2 in 16bit compiler, 4 in 32bit compiler",
                    "description": "sizeof(x) returns the size of x in bytes.\nfloat *p is a pointer to a float.\n\n\nIn 16 bit compiler, the pointer size is always 2 bytes.\nIn 32 bit compiler, the pointer size is always 4 bytes."
                }
            ]
        },
        {
            "question_title": "What will be the output of the program?\n#include<stdio.h>\n#include<math.h>\nint main()\n{\n    float n=1.54;\n    printf(\"%f, %f\\n\", ceil(n), floor(n));\n    return 0;\n}",
            "options": [
                {
                    "opt_1": "2.000000, 1.000000",
                    "opt_2": "1.500000, 1.500000",
                    "opt_3": "1.550000, 2.000000",
                    "opt_4": "1.000000, 2.000000",
                    "correct_answer": "2.000000, 1.000000",
                    "description": "ceil(x) round up the given value. It finds the smallest integer not < x.\nfloor(x) round down the given value. It finds the smallest integer not > x.\n\n\nprintf(\"%f, %f\\n\", ceil(n), floor(n)); In this line ceil(1.54) round up the 1.54 to 2 and floor(1.54) round down the 1.54 to 1.\n\n\nIn the printf(\"%f, %f\\n\", ceil(n), floor(n)); statement, the format specifier \"%f %f\" tells output to be float value. Hence it prints 2.000000 and 1.000000."
                }
            ]
        },
        {
            "question_title": "We want to round off x, a float, to an int value, The correct way to do is",
            "options": [
                {
                    "opt_1": "y = (int)(x + 0.5)",
                    "opt_2": "y = int(x + 0.5)",
                    "opt_3": "y = (int)x + 0.5",
                    "opt_4": "y = (int)((int)x + 0.5)",
                    "correct_answer": "y = (int)(x + 0.5)",
                    "description": "Rounding off a value means replacing it by a nearest value that is approximately equal or smaller or greater to the given number.\n\n\ny = (int)(x + 0.5); here x is any float value. To roundoff, we have to typecast the value of x by using (int)\n\nExample:\n\n#include <stdio.h>\n\nint main ()\n{\n  float x = 3.6;\n  int y = (int)(x + 0.5);\n  printf (\"Result = %d\\n\", y );\n  return 0;\n}\n\n\nOutput:\nResult = 4."
                }
            ]
        },
        {
            "question_title": "Which of the following range is a valid long double (Turbo C in 16 bit DOS OS) ?",
            "options": [
                {
                    "opt_1": "3.4E-4932 to 1.1E+4932",
                    "opt_2": "3.4E-4932 to 3.4E+4932",
                    "opt_3": "1.1E-4932 to 1.1E+4932",
                    "opt_4": "1.7E-4932 to 1.7E+4932",
                    "correct_answer": "3.4E-4932 to 1.1E+4932",
                    "description": "The range of long double is 3.4E-4932 to 1.1E+4932"
                }
            ]
        },
        {
            "question_title": "What are the different types of real data type in C ?",
            "options": [
                {
                    "opt_1": "float, double",
                    "opt_2": "short int, double, long int",
                    "opt_3": "float, double, long double",
                    "opt_4": "double, long int, float",
                    "correct_answer": "float, double, long double",
                    "description": "The floating point data types are called real data types. Hence float, double, and long double are real data types."
                }
            ]
        },
        {
            "question_title": "Which statement will you add in the following program to work it correctly?\n#include<stdio.h>\nint main()\n{\n    printf(\"%f\\n\", log(36.0));\n    return 0;\n}",
            "options": [
                {
                    "opt_1": "#include<conio.h>",
                    "opt_2": "#include<math.h>",
                    "opt_3": "#include<stdlib.h>",
                    "opt_4": "#include<dos.h>",
                    "correct_answer": "#include<math.h>",
                    "description": "math.h is a header file in the standard library of C programming language designed for basic mathematical operations.\n\n\nDeclaration syntax: double log(double);"
                }
            ]
        },
        {
            "question_title": "The binary equivalent of 5.375 is",
            "options": [
                {
                    "opt_1": "101.101110111",
                    "opt_2": "101.011",
                    "opt_3": "101011",
                    "opt_4": "None of above",
                    "correct_answer": "101.011",
                    "description": "No answer description is available."
                }
            ]
        },
        {
            "question_title": "Which of the following statement obtains the remainder on dividing 5.5 by 1.3 ?",
            "options": [
                {
                    "opt_1": "rem = (5.5 % 1.3)",
                    "opt_2": "rem = modf(5.5, 1.3)",
                    "opt_3": "rem = fmod(5.5, 1.3)",
                    "opt_4": "Error: we can't divide",
                    "correct_answer": "rem = fmod(5.5, 1.3)",
                    "description": "fmod(x,y) - Calculates x modulo y, the remainder of x/y.\n\nThis function is the same as the modulus operator. But fmod() performs floating point divisions.\n\nExample:\n\n#include <stdio.h>\n#include <math.h>\n\nint main ()\n{\n  printf (\"fmod of 5.5 by 1.3 is %lf\\n\", fmod (5.5, 1.3) );\n  return 0;\n}\n\nOutput:\nfmod of 5.5 by 1.3 is 0.300000"
                }
            ]
        },
        {
            "question_title": "What will you do to treat the constant 3.14 as a long double?",
            "options": [
                {
                    "opt_1": "use 3.14LD",
                    "opt_2": "use 3.14L",
                    "opt_3": "use 3.14DL",
                    "opt_4": "use 3.14LF",
                    "correct_answer": "use 3.14L",
                    "description": "Given 3.14 is a double constant.\n\nTo specify 3.14 as long double, we have to add L to the 3.14. (i.e 3.14L)"
                }
            ]
        },
        {
            "question_title": "If the binary eauivalent of 5.375 in normalised form is 0100 0000 1010 1100 0000 0000 0000 0000, what will be the output of the program (on intel machine)? \n#include<stdio.h>\n#include<math.h>\nint main()\n{\n    float a=5.375;\n    char *p;\n    int i;\n    p = (char*)&a;\n    for(i=0; i<=3; i++)\n        printf(\"%02x\\n\", (unsigned char)p[i]);\n    return 0;\n}",
            "options": [
                {
                    "opt_1": "40 AC 00 00",
                    "opt_2": "04 CA 00 00",
                    "opt_3": "00 00 AC 40",
                    "opt_4": "00 00 CA 04",
                    "correct_answer": "00 00 AC 40",
                    "description": "No answer description is available."
                }
            ]
        },
        {
            "question_title": "A float occupies 4 bytes. If the hexadecimal equivalent of these 4 bytes are A, B, C and D, then when this float is stored in memory in which of the following order do these bytes gets stored?",
            "options": [
                {
                    "opt_1": "ABCD",
                    "opt_2": "DCBA",
                    "opt_3": "0xABCD",
                    "opt_4": "Depends on big endian or little endian architecture",
                    "correct_answer": "Depends on big endian or little endian architecture",
                    "description": "No answer description is available."
                }
            ]
        },
        {
            "question_title": "What will you do to treat the constant 3.14 as a float?",
            "options": [
                {
                    "opt_1": "use float(3.14f)",
                    "opt_2": "use 3.14f",
                    "opt_3": "use f(3.14)",
                    "opt_4": "use (f)(3.14)",
                    "correct_answer": "use 3.14f",
                    "description": "Given 3.14 is a double constant.\nTo specify 3.14 as float, we have to add f to the 3.14. (i.e 3.14f)"
                }
            ]
        }
    ]
}