{"chapter_name":"Floating Point Issues","questions":[{"question_title":"What will be the output of the program?\n#include<stdio.h>\nint main()\n{\n    float a=0.7;\n    if(a < 0.7)\n        printf(\"C\\n\");\n    else\n        printf(\"C++\\n\");\n    return 0;\n}","options":[{"opt_1":"C","opt_2":"C++","opt_3":"Compiler error","opt_4":"Non of above","correct_answer":"C","description":"if(a < 0.7) here a is a float variable and 0.7 is a double constant. The float variable a is less than double constant 0.7. Hence the if condition is satisfied and it prints 'C'Example:\n\n#include<stdio.h>\nint main()\n{\n    float a=0.7;\n    printf(\"%.10f %.10f\\n\",0.7, a);\n    return 0;\n}\n\n\nOutput:0.7000000000  0.6999999881"}]},{"question_title":"What will be the output of the program?\n#include<stdio.h>\nint main()\n{\n    float f=43.20;\n    printf(\"%e, \", f);\n    printf(\"%f, \", f);\n    printf(\"%g\", f);\n    return 0;\n}","options":[{"opt_1":"4.320000e+01, 43.200001, 43.2","opt_2":"4.3, 43.22, 43.21","opt_3":"4.3e, 43.20f, 43.00","opt_4":"Error","correct_answer":"4.320000e+01, 43.200001, 43.2","description":"printf(\"%e, \", f); Here '%e' specifies the \"Scientific Notation\" format. So, it prints the 43.20 as 4.320000e+01.\n\n\nprintf(\"%f, \", f); Here '%f' specifies the \"Decimal Floating Point\" format. So, it prints the 43.20 as 43.200001.\n\n\nprintf(\"%g, \", f); Here '%g' \"Use the shorter of %e or %f\". So, it prints the 43.20 as 43.2."}]},{"question_title":"What will be the output of the program?\n#include<stdio.h>\nint main()\n{\n    float d=2.25;\n    printf(\"%e,\", d);\n    printf(\"%f,\", d);\n    printf(\"%g,\", d);\n    printf(\"%lf\", d);\n    return 0;\n}","options":[{"opt_1":"2.2, 2.50, 2.50, 2.5","opt_2":"2.2e, 2.25f, 2.00, 2.25","opt_3":"2.250000e+000, 2.250000, 2.25, 2.250000","opt_4":"Error","correct_answer":"2.250000e+000, 2.250000, 2.25, 2.250000","description":"printf(\"%e,\", d); Here '%e' specifies the \"Scientific Notation\" format. So, it prints the 2.25 as 2.250000e+000.\n\n\nprintf(\"%f,\", d); Here '%f' specifies the \"Decimal Floating Point\" format. So, it prints the 2.25 as 2.250000.\n\n\nprintf(\"%g,\", d); Here '%g' \"Use the shorter of %e or %f\". So, it prints the 2.25 as 2.25.\n\n\nprintf(\"%lf,\", d); Here '%lf' specifies the \"Long Double\" format. So, it prints the 2.25 as 2.250000."}]},{"question_title":"What will be the output of the program?\n#include<stdio.h>\n#include<math.h>\nint main()\n{\n    printf(\"%d, %d, %d\\n\", sizeof(3.14f), sizeof(3.14), sizeof(3.14l));\n    return 0;\n}","options":[{"opt_1":"4, 4, 4","opt_2":"4, 8, 8","opt_3":"4, 8, 10","opt_4":"4, 8, 12","correct_answer":"4, 8, 10","description":"sizeof(3.14f) here '3.14f' specifies the float data type. Hence size of float is 4 bytes.\n                \n\nsizeof(3.14) here '3.14' specifies the double data type. Hence size of float is 8 bytes.\n                \n\nsizeof(3.14l) here '3.14l' specifies the long double data type. Hence size of float is 10 bytes.\n\n\nNote: If you run the above program in Linux platform (GCC Compiler) it will give 4, 8, 12 as output. If you run in Windows platform (TurboC Compiler) it will give 4, 8, 10 as output. Because, C is a machine dependent language."}]},{"question_title":"What will be the output of the program?\n#include<stdio.h>\nint main()\n{\n    float a=0.7;\n    if(a < 0.7f)\n        printf(\"C\\n\");\n    else\n        printf(\"C++\\n\");\n    return 0;\n}","options":[{"opt_1":"C","opt_2":"C++","opt_3":"Compiler error","opt_4":"Non of above","correct_answer":"C++","description":"if(a < 0.7f) here a is a float variable and 0.7f is a float constant. The float variable a is not less than 0.7f float constant. But both are equal. Hence the if condition is failed and it goes to else it prints 'C++'Example:\n\n#include<stdio.h>\nint main()\n{\n    float a=0.7;\n    printf(\"%.10f %.10f\\n\",0.7f, a);\n    return 0;\n}\n\n\nOutput:0.6999999881  0.6999999881"}]},{"question_title":"What will be the output of the program?\n#include<stdio.h>\nint main()\n{\n    float fval=7.29;\n    printf(\"%d\\n\", (int)fval);\n    return 0;\n}","options":[{"opt_1":"0","opt_2":"0.0","opt_3":"7.0","opt_4":"7","correct_answer":"7","description":"printf(\"%d\\n\", (int)fval); It prints '7'. because, we typecast the (int)fval in to integer. It converts the float value to the nearest integer value."}]},{"question_title":"What will be the output of the program?\n#include<stdio.h>\n#include<math.h>\nint main()\n{\n    printf(\"%f\\n\", sqrt(36.0));\n    return 0;\n}","options":[{"opt_1":"6.0","opt_2":"6","opt_3":"6.000000","opt_4":"Error: Prototype sqrt() not found.","correct_answer":"6.000000","description":"printf(\"%f\\n\", sqrt(36.0)); It prints the square root of 36 in the float format(i.e 6.000000).\n\n\nDeclaration Syntax: double sqrt(double x) calculates and return the positive square root of the given number."}]},{"question_title":"What will be the output of the program?\n#include<stdio.h>\nint main()\n{\n    float *p;\n    printf(\"%d\\n\", sizeof(p));\n    return 0;\n}","options":[{"opt_1":"2 in 16bit compiler, 4 in 32bit compiler","opt_2":"4 in 16bit compiler, 2 in 32bit compiler","opt_3":"4 in 16bit compiler, 4 in 32bit compiler","opt_4":"2 in 16bit compiler, 2 in 32bit compiler","correct_answer":"2 in 16bit compiler, 4 in 32bit compiler","description":"sizeof(x) returns the size of x in bytes.\nfloat *p is a pointer to a float.\n\n\nIn 16 bit compiler, the pointer size is always 2 bytes.\nIn 32 bit compiler, the pointer size is always 4 bytes."}]},{"question_title":"What will be the output of the program?\n#include<stdio.h>\n#include<math.h>\nint main()\n{\n    float n=1.54;\n    printf(\"%f, %f\\n\", ceil(n), floor(n));\n    return 0;\n}","options":[{"opt_1":"2.000000, 1.000000","opt_2":"1.500000, 1.500000","opt_3":"1.550000, 2.000000","opt_4":"1.000000, 2.000000","correct_answer":"2.000000, 1.000000","description":"ceil(x) round up the given value. It finds the smallest integer not < x.\nfloor(x) round down the given value. It finds the smallest integer not > x.\n\n\nprintf(\"%f, %f\\n\", ceil(n), floor(n)); In this line ceil(1.54) round up the 1.54 to 2 and floor(1.54) round down the 1.54 to 1.\n\n\nIn the printf(\"%f, %f\\n\", ceil(n), floor(n)); statement, the format specifier \"%f %f\" tells output to be float value. Hence it prints 2.000000 and 1.000000."}]}]}